use clap::{Args, ValueEnum};
use std::fmt::Display;

use crate::options::base_options::BaseOptions;

#[derive(Clone, Debug, Hash, PartialEq, Eq, Default, Args)]
pub struct SSLOptions {
    #[clap(flatten)]
    pub base: BaseOptions,

    #[clap(long, default_value = "x86_64-unknown-linux-gnu-")]
    pub cross_prefix: String,

    #[clap(long)]
    pub os: Option<OsType>,
}

//noinspection SpellCheckingInspection
#[allow(non_camel_case_types)]
#[derive(Clone, Debug, Hash, PartialEq, Eq, ValueEnum)]
pub enum OsType {
    Cygwin,
    Cygwin_i386,
    Cygwin_i486,
    Cygwin_i586,
    Cygwin_i686,
    Cygwin_x86,
    #[clap(name = "cygwin-x86_64")]
    Cygwin_x86_64,
    UEFI,
    UEFI_x86,
    #[clap(name = "UEFI-x86_64")]
    UEFI_x86_64,
    UWIN,
    VC_CE,
    VC_WIN32,
    VC_WIN32_ARM,
    VC_WIN32_ARM_UWP,
    VC_WIN32_ONECORE,
    VC_WIN32_UWP,
    VC_WIN64_ARM,
    VC_WIN64_ARM_UWP,
    VC_WIN64A,
    VC_WIN64A_ONECORE,
    VC_WIN64A_UWP,
    VC_WIN64A_masm,
    VC_WIN64I,
    android_arm,
    android_arm64,
    android_armeabi,
    android_mips,
    android_mips64,
    android_x86,
    android_x86_64,
    android64,
    android64_aarch64,
    android64_mips64,
    android64_x86_64,
    cc,
    darwin_i386,
    darwin_i386_cc,
    darwin64_arm64,
    darwin64_arm64_cc,
    darwin64_ppc,
    darwin64_ppc_cc,
    #[clap(name = "darwin64-x86_64-cc")]
    darwin64_x86_64,
    #[clap(name = "darwin64-x86_64-cc")]
    darwin64_x86_64_cc,
    gcc,
    ios_cross,
    ios_xcrun,
    ios64_cross,
    ios64_xcrun,
    iossimulator_xcrun,
    iphoneos_cross,
    linux_aarch64,
    linux_alpha_gcc,
    linux_aout,
    linux_arm64ilp32,
    linux_armv4,
    linux_elf,
    linux_ia64,
    linux_x32,
    linux_x86,
    linux_x86_clang,
    #[clap(name = "linux_x86-64")]
    linux_x86_64,
    #[clap(name = "linux_x86-64_clang")]
    linux_x86_64_clang,
    linux32_s390x,
    linux64_loongarch64,
    linux64_mips64,
    linux64_riscv64,
    linux64_s390x,
    linux64_sparcv9,
    mingw,
    mingw64,
}

impl Display for OsType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            OsType::Cygwin => write!(f, "cygwin"),
            OsType::Cygwin_i386 => write!(f, "cygwin-i386"),
            OsType::Cygwin_i486 => write!(f, "cygwin-i486"),
            OsType::Cygwin_i586 => write!(f, "cygwin-i586"),
            OsType::Cygwin_i686 => write!(f, "cygwin-i686"),
            OsType::Cygwin_x86 => write!(f, "cygwin-x86"),
            OsType::Cygwin_x86_64 => write!(f, "cygwin-x86_64"),
            OsType::UEFI => write!(f, "UEFI"),
            OsType::UEFI_x86 => write!(f, "UEFI-x86"),
            OsType::UEFI_x86_64 => write!(f, "UEFI-x86_64"),
            OsType::UWIN => write!(f, "uwin"),
            OsType::VC_CE => write!(f, "VC-CE"),
            OsType::VC_WIN32 => write!(f, "VC-WIN32"),
            OsType::VC_WIN32_ARM => write!(f, "VC-WIN32-ARM"),
            OsType::VC_WIN32_ARM_UWP => write!(f, "VC-WIN32-ARM-UWP"),
            OsType::VC_WIN32_ONECORE => write!(f, "VC-WIN32-ONECORE"),
            OsType::VC_WIN32_UWP => write!(f, "VC-WIN32-UWP"),
            OsType::VC_WIN64_ARM => write!(f, "VC-WIN64-ARM"),
            OsType::VC_WIN64_ARM_UWP => write!(f, "VC-WIN64-ARM-UWP"),
            OsType::VC_WIN64A => write!(f, "VC-WIN64A"),
            OsType::VC_WIN64A_ONECORE => write!(f, "VC-WIN64A-ONECORE"),
            OsType::VC_WIN64A_UWP => write!(f, "VC-WIN64A-UWP"),
            OsType::VC_WIN64A_masm => write!(f, "VC-WIN64A-masm"),
            OsType::VC_WIN64I => write!(f, "VC-WIN64I"),
            OsType::android_arm => write!(f, "android-arm"),
            OsType::android_arm64 => write!(f, "android-arm64"),
            OsType::android_armeabi => write!(f, "android-armeabi"),
            OsType::android_mips => write!(f, "android-mips"),
            OsType::android_mips64 => write!(f, "android-mips64"),
            OsType::android_x86 => write!(f, "android-x86"),
            OsType::android_x86_64 => write!(f, "android-x86_64"),
            OsType::android64 => write!(f, "android64"),
            OsType::android64_aarch64 => write!(f, "android64-aarch64"),
            OsType::android64_mips64 => write!(f, "android64-mips64"),
            OsType::android64_x86_64 => write!(f, "android64-x86_64"),
            OsType::cc => write!(f, "cc"),
            OsType::darwin_i386 => write!(f, "darwin-i386"),
            OsType::darwin_i386_cc => write!(f, "darwin-i386-cc"),
            OsType::darwin64_arm64 => write!(f, "darwin64-arm64"),
            OsType::darwin64_arm64_cc => write!(f, "darwin64-arm64-cc"),
            OsType::darwin64_ppc => write!(f, "darwin64-ppc"),
            OsType::darwin64_ppc_cc => write!(f, "darwin64-ppc-cc"),
            OsType::darwin64_x86_64 => write!(f, "darwin64-x86_64"),
            OsType::darwin64_x86_64_cc => write!(f, "darwin64-x86_64-cc"),
            OsType::gcc => write!(f, "gcc"),
            OsType::ios_cross => write!(f, "ios-cross"),
            OsType::ios_xcrun => write!(f, "ios-xcrun"),
            OsType::ios64_cross => write!(f, "ios64-cross"),
            OsType::ios64_xcrun => write!(f, "ios64-xcrun"),
            OsType::iossimulator_xcrun => write!(f, "iossimulator-xcrun"),
            OsType::iphoneos_cross => write!(f, "iphoneos-cross"),
            OsType::linux_aarch64 => write!(f, "linux-aarch64"),
            OsType::linux_alpha_gcc => write!(f, "linux-alpha-gcc"),
            OsType::linux_aout => write!(f, "linux-aout"),
            OsType::linux_arm64ilp32 => write!(f, "linux-arm64ilp32"),
            OsType::linux_armv4 => write!(f, "linux-armv4"),
            OsType::linux_elf => write!(f, "linux-elf"),
            OsType::linux_ia64 => write!(f, "linux-ia64"),
            OsType::linux_x32 => write!(f, "linux-x32"),
            OsType::linux_x86 => write!(f, "linux-x86"),
            OsType::linux_x86_clang => write!(f, "linux-x86-clang"),
            OsType::linux_x86_64 => write!(f, "linux-x86_64"),
            OsType::linux_x86_64_clang => write!(f, "linux-x86_64-clang"),
            OsType::linux32_s390x => write!(f, "linux32-s390x"),
            OsType::linux64_loongarch64 => write!(f, "linux64-loongarch64"),
            OsType::linux64_mips64 => write!(f, "linux64-mips64"),
            OsType::linux64_riscv64 => write!(f, "linux64-riscv64"),
            OsType::linux64_s390x => write!(f, "linux64-s390x"),
            OsType::linux64_sparcv9 => write!(f, "linux64-sparcv9"),
            OsType::mingw => write!(f, "mingw"),
            OsType::mingw64 => write!(f, "mingw64"),
        }
    }
}
