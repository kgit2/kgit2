package com.kgit2.exception

import libgit2.git_error_code

enum class GitErrorCode(val value: git_error_code) {
    /**< No error */
    GIT_OK(0),

    /**< Generic error */
    GIT_ERROR(-1),

    /**< Requested object could not be found */
    GIT_ENOTFOUND(-3),

    /**< Object exists preventing operation */
    GIT_EEXISTS(-4),

    /**< More than one object matches */
    GIT_EAMBIGUOUS(-5),

    /**< Output buffer too short to hold data */

    GIT_EBUFS(-6),

    /**
     * GIT_EUSER is a special error that is never generated by libgit2
     * code.  You can return it from a callback (e.g to stop an iteration)
     * to know that it was generated by the callback and not by libgit2.
     */
    GIT_EUSER(-7),

    /**< Operation not allowed on bare repository */
    GIT_EBAREREPO(-8),

    /**< HEAD refers to branch with no commits */
    GIT_EUNBORNBRANCH(-9),

    /**< Merge in progress prevented operation */
    GIT_EUNMERGED(-10),

    /**< Reference was not fast-forwardable */
    GIT_ENONFASTFORWARD(-11),

    /**< Name/ref spec was not in a valid format */
    GIT_EINVALIDSPEC(-12),

    /**< Checkout conflicts prevented operation */
    GIT_ECONFLICT(-13),

    /**< Lock file prevented operation */
    GIT_ELOCKED(-14),

    /**< Reference value does not match expected */
    GIT_EMODIFIED(-15),

    /**< Authentication error */
    GIT_EAUTH(-16),

    /**< Server certificate is invalid */
    GIT_ECERTIFICATE(-17),

    /**< Patch/merge has already been applied */
    GIT_EAPPLIED(-18),

    /**< The requested peel operation is not possible */
    GIT_EPEEL(-19),

    /**< Unexpected EOF */
    GIT_EEOF(-20),

    /**< Invalid operation or input */
    GIT_EINVALID(-21),

    /**< Uncommitted changes in index prevented operation */
    GIT_EUNCOMMITTED(-22),

    /**< The operation is not valid for a directory */
    GIT_EDIRECTORY(-23),

    /**< A merge conflict exists and cannot continue */
    GIT_EMERGECONFLICT(-24),

    /**< A user-configured callback refused to act */
    GIT_PASSTHROUGH(-30),

    /**< Signals end of iteration with iterator */
    GIT_ITEROVER(-31),

    /**< Internal only */
    GIT_RETRY(-32),

    /**< Hashsum mismatch in object */
    GIT_EMISMATCH(-33),

    /**< Unsaved changes in the index would be overwritten */
    GIT_EINDEXDIRTY(-34),

    /**< Patch application failed */
    GIT_EAPPLYFAIL(-35),

    /**< The object is not owned by the current user */
    GIT_EOWNER(-36);

    companion object {
        fun fromRaw(raw: git_error_code): GitErrorCode {
            return when (raw) {
                GIT_OK.value -> GIT_OK
                GIT_ERROR.value -> GIT_ERROR
                GIT_ENOTFOUND.value -> GIT_ENOTFOUND
                GIT_EEXISTS.value -> GIT_EEXISTS
                GIT_EAMBIGUOUS.value -> GIT_EAMBIGUOUS
                GIT_EBUFS.value -> GIT_EBUFS
                GIT_EUSER.value -> GIT_EUSER
                GIT_EBAREREPO.value -> GIT_EBAREREPO
                GIT_EUNBORNBRANCH.value -> GIT_EUNBORNBRANCH
                GIT_EUNMERGED.value -> GIT_EUNMERGED
                GIT_ENONFASTFORWARD.value -> GIT_ENONFASTFORWARD
                GIT_EINVALIDSPEC.value -> GIT_EINVALIDSPEC
                GIT_ECONFLICT.value -> GIT_ECONFLICT
                GIT_ELOCKED.value -> GIT_ELOCKED
                GIT_EMODIFIED.value -> GIT_EMODIFIED
                GIT_EAUTH.value -> GIT_EAUTH
                GIT_ECERTIFICATE.value -> GIT_ECERTIFICATE
                GIT_EAPPLIED.value -> GIT_EAPPLIED
                GIT_EPEEL.value -> GIT_EPEEL
                GIT_EEOF.value -> GIT_EEOF
                GIT_EINVALID.value -> GIT_EINVALID
                GIT_EUNCOMMITTED.value -> GIT_EUNCOMMITTED
                GIT_EDIRECTORY.value -> GIT_EDIRECTORY
                GIT_EMERGECONFLICT.value -> GIT_EMERGECONFLICT
                GIT_PASSTHROUGH.value -> GIT_PASSTHROUGH
                GIT_ITEROVER.value -> GIT_ITEROVER
                GIT_RETRY.value -> GIT_RETRY
                GIT_EMISMATCH.value -> GIT_EMISMATCH
                GIT_EINDEXDIRTY.value -> GIT_EINDEXDIRTY
                GIT_EAPPLYFAIL.value -> GIT_EAPPLYFAIL
                GIT_EOWNER.value -> GIT_EOWNER
                else -> error("Unknown error type: $raw")
            }
        }
    }
}
