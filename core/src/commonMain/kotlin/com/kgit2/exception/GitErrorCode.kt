package com.kgit2.exception

import libgit2.*

sealed class GitErrorCode(val value: git_error_code) {
    /**< No error */
    object Ok : GitErrorCode(GIT_OK)

    /**< Generic error */
    object Error : GitErrorCode(GIT_ERROR)

    /**< Requested object could not be found */
    object NotFound : GitErrorCode(GIT_ENOTFOUND)

    /**< Object exists preventing operation */
    object Exists : GitErrorCode(GIT_EEXISTS)

    /**< More than one object matches */
    object Ambiguous : GitErrorCode(GIT_EAMBIGUOUS)

    /**< Output buffer too short to hold data */

    object Bufs : GitErrorCode(GIT_EBUFS)

    /**
     * GIT_EUSER is a special error that is never generated by libgit2
     * code.  You can return it from a callback (e.g to stop an iteration)
     * to know that it was generated by the callback and not by libgit2.
     */
    object User : GitErrorCode(GIT_EUSER)

    /**< Operation not allowed on bare repository */
    object BareRepo : GitErrorCode(GIT_EBAREREPO)

    /**< HEAD refers to branch with no commits */
    object UnBornBranch : GitErrorCode(GIT_EUNBORNBRANCH)

    /**< Merge in progress prevented operation */
    object UnMerged : GitErrorCode(GIT_EUNMERGED)

    /**< Reference was not fast-forwardable */
    object NonFastForward : GitErrorCode(GIT_ENONFASTFORWARD)

    /**< Name/ref spec was not in a valid format */
    object InvalidSpec : GitErrorCode(GIT_EINVALIDSPEC)

    /**< Checkout conflicts prevented operation */
    object Conflict : GitErrorCode(GIT_ECONFLICT)

    /**< Lock file prevented operation */
    object Locked : GitErrorCode(GIT_ELOCKED)

    /**< Reference value does not match expected */
    object Modified : GitErrorCode(GIT_EMODIFIED)

    /**< Authentication error */
    object Auth : GitErrorCode(GIT_EAUTH)

    /**< Server certificate is invalid */
    object Certificate : GitErrorCode(GIT_ECERTIFICATE)

    /**< Patch/merge has already been applied */
    object Applied : GitErrorCode(GIT_EAPPLIED)

    /**< The requested peel operation is not possible */
    object Peel : GitErrorCode(GIT_EPEEL)

    /**< Unexpected EOF */
    object EOF : GitErrorCode(GIT_EEOF)

    /**< Invalid operation or input */
    object Invalid : GitErrorCode(GIT_EINVALID)

    /**< Uncommitted changes in index prevented operation */
    object UnCommitted : GitErrorCode(GIT_EUNCOMMITTED)

    /**< The operation is not valid for a directory */
    object Directory : GitErrorCode(GIT_EDIRECTORY)

    /**< A merge conflict exists and cannot continue */
    object MergeConflict : GitErrorCode(GIT_EMERGECONFLICT)

    /**< A user-configured callback refused to act */
    object PassThrough : GitErrorCode(GIT_PASSTHROUGH)

    /**< Signals end of iteration with iterator */
    object IterOver : GitErrorCode(GIT_ITEROVER)

    /**< Internal only */
    object Retry : GitErrorCode(GIT_RETRY)

    /**< Hashsum mismatch in object */
    object Mismatch : GitErrorCode(GIT_EMISMATCH)

    /**< Unsaved changes in the index would be overwritten */
    object IndexDirty : GitErrorCode(GIT_EINDEXDIRTY)

    /**< Patch application failed */
    object ApplyFail : GitErrorCode(GIT_EAPPLYFAIL)

    /**< The object is not owned by the current user */
    object Owner : GitErrorCode(GIT_EOWNER)

    class Unknown(value: git_error_code) : GitErrorCode(value)



    companion object {
        fun fromRaw(raw: git_error_code): GitErrorCode {
            return when (raw) {
                GIT_OK -> Ok
                GIT_ERROR -> Error
                GIT_ENOTFOUND -> NotFound
                GIT_EEXISTS -> Exists
                GIT_EAMBIGUOUS -> Ambiguous
                GIT_EBUFS -> Bufs
                GIT_EUSER -> User
                GIT_EBAREREPO -> BareRepo
                GIT_EUNBORNBRANCH -> UnBornBranch
                GIT_EUNMERGED -> UnMerged
                GIT_ENONFASTFORWARD -> NonFastForward
                GIT_EINVALIDSPEC -> InvalidSpec
                GIT_ECONFLICT -> Conflict
                GIT_ELOCKED -> Locked
                GIT_EMODIFIED -> Modified
                GIT_EAUTH -> Auth
                GIT_ECERTIFICATE -> Certificate
                GIT_EAPPLIED -> Applied
                GIT_EPEEL -> Peel
                GIT_EEOF -> EOF
                GIT_EINVALID -> Invalid
                GIT_EUNCOMMITTED -> UnCommitted
                GIT_EDIRECTORY -> Directory
                GIT_EMERGECONFLICT -> MergeConflict
                GIT_PASSTHROUGH -> PassThrough
                GIT_ITEROVER -> IterOver
                GIT_RETRY -> Retry
                GIT_EMISMATCH -> Mismatch
                GIT_EINDEXDIRTY -> IndexDirty
                GIT_EAPPLYFAIL -> ApplyFail
                GIT_EOWNER -> Owner
                else -> Unknown(raw)
            }
        }
    }

    override fun toString(): String {
        return "${this::class.simpleName}($value)"
    }
}
